"use client";

import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { getAvailableModels } from '@/lib/mock-models';
import { AIModel, ModelResult } from '@/types/ai-models';
import {
  Eye,
  HelpCircle,
  Settings,
  Sparkles,
  TrendingUp,
  Users,
  Zap
} from 'lucide-react';
import React from 'react';
import ModelSelector from './model-selector';
import ParameterForm from './parameter-form';
import ResultDisplay from './result-display';
import UsageGuide from './usage-guide';

/**
 * Props for ToolSection component
 */
interface ToolSectionProps {
  className?: string;
}

/**
 * Main Tool Section Component
 * Integrates all AI tool functionality into a single interactive area
 */
const ToolSection: React.FC<ToolSectionProps> = ({ className = '' }) => {
  // State management
  const [selectedModel, setSelectedModel] = React.useState<AIModel | undefined>();
  const [parameters, setParameters] = React.useState<Record<string, string | number | boolean | File>>({});
  const [currentResult, setCurrentResult] = React.useState<ModelResult | undefined>();
  const [isGenerating, setIsGenerating] = React.useState(false);
  const [activeTab, setActiveTab] = React.useState<string>('models');

  // Load available models
  const availableModels = React.useMemo(() => getAvailableModels(), []);

  // Reset parameters when model changes
  React.useEffect(() => {
    if (selectedModel) {
      const defaultParams: Record<string, string | number | boolean> = {};
      selectedModel.parameters.forEach(param => {
        if (param.defaultValue !== undefined) {
          defaultParams[param.key] = param.defaultValue;
        }
      });
      setParameters(defaultParams);
      setActiveTab('configure'); // Auto-switch to configure tab
    }
  }, [selectedModel]);

  const handleModelSelect = (model: AIModel) => {
    setSelectedModel(model);
    setCurrentResult(undefined); // Clear previous results
  };

  const handleParameterChange = (key: string, value: string | number | boolean | File) => {
    setParameters(prev => ({ ...prev, [key]: value }));
  };

  const handleGenerate = async () => {
    if (!selectedModel) return;

    setIsGenerating(true);
    setActiveTab('results'); // Switch to results tab

    try {
      // Create mock result for demonstration
      // Convert File objects to strings for serialization
      const serializedInputs: Record<string, string | number | boolean> = {};
      Object.entries(parameters).forEach(([key, value]) => {
        if (value instanceof File) {
          serializedInputs[key] = value.name; // Store filename instead of File object
        } else {
          serializedInputs[key] = value;
        }
      });

      const mockResult: ModelResult = {
        id: `result-${Date.now()}`,
        modelId: selectedModel.id,
        status: 'processing',
        inputs: serializedInputs,
        createdAt: new Date(),
        creditsUsed: selectedModel.pricing.creditsPerUse
      };

      setCurrentResult(mockResult);

      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Generate mock output based on model type
      let mockOutput;
      switch (selectedModel.category) {
        case 'text-generation':
          mockOutput = {
            type: 'text' as const,
            content: `This is a simulated text generation result for the prompt: "${parameters.prompt}". In a real implementation, this would be generated by ${selectedModel.name}.`
          };
          break;
        
        case 'image-generation':
          mockOutput = {
            type: 'image' as const,
            content: ['https://picsum.photos/512/512?random=1', 'https://picsum.photos/512/512?random=2']
          };
          break;
        
        case 'audio-generation':
          mockOutput = {
            type: 'audio' as const,
            content: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav'
          };
          break;
        
        default:
          mockOutput = {
            type: 'text' as const,
            content: 'Simulated result output'
          };
      }

      // Update result with completed status
      setCurrentResult(prev => prev ? {
        ...prev,
        status: 'completed',
        outputs: mockOutput,
        completedAt: new Date(),
        processingTime: Math.floor(Math.random() * 30) + 10
      } : undefined);

    } catch {
      // Handle error case
      setCurrentResult(prev => prev ? {
        ...prev,
        status: 'failed',
        error: 'Failed to generate result. Please try again.',
        completedAt: new Date()
      } : undefined);
    } finally {
      setIsGenerating(false);
    }
  };

  const stats = {
    totalModels: availableModels.length,
    popularModels: availableModels.filter(m => m.isPopular).length,
    categories: new Set(availableModels.map(m => m.category)).size
  };

  return (
    <section className={`bg-white py-16 ${className}`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Section Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-2 mb-4">
            <Sparkles className="w-8 h-8 text-black" />
            <h2 className="text-3xl md:text-4xl font-bold text-black">
              AI Tools Playground
            </h2>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Explore and experiment with cutting-edge AI models. 
            Select a model, configure parameters, and generate amazing results.
          </p>
          
          {/* Quick Stats */}
          <div className="flex flex-wrap justify-center gap-6 mb-8">
            <div className="flex items-center gap-2 text-gray-600">
              <Zap className="w-5 h-5" />
              <span className="font-medium">{stats.totalModels} Models</span>
            </div>
            <div className="flex items-center gap-2 text-gray-600">
              <TrendingUp className="w-5 h-5" />
              <span className="font-medium">{stats.popularModels} Popular</span>
            </div>
            <div className="flex items-center gap-2 text-gray-600">
              <Settings className="w-5 h-5" />
              <span className="font-medium">{stats.categories} Categories</span>
            </div>
          </div>
        </div>

        {/* Main Interface */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Model Selection & Configuration */}
          <div className="lg:col-span-2 space-y-6">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid w-full grid-cols-4 bg-gray-100">
                <TabsTrigger 
                  value="models" 
                  className="flex items-center gap-2 data-[state=active]:bg-white"
                >
                  <Zap className="w-4 h-4" />
                  Models
                </TabsTrigger>
                <TabsTrigger 
                  value="configure" 
                  className="flex items-center gap-2 data-[state=active]:bg-white"
                  disabled={!selectedModel}
                >
                  <Settings className="w-4 h-4" />
                  Configure
                </TabsTrigger>
                <TabsTrigger 
                  value="results" 
                  className="flex items-center gap-2 data-[state=active]:bg-white"
                >
                  <Eye className="w-4 h-4" />
                  Results
                </TabsTrigger>
                <TabsTrigger 
                  value="help" 
                  className="flex items-center gap-2 data-[state=active]:bg-white"
                >
                  <HelpCircle className="w-4 h-4" />
                  Help
                </TabsTrigger>
              </TabsList>

              <TabsContent value="models" className="mt-6">
                <ModelSelector
                  models={availableModels}
                  selectedModel={selectedModel}
                  onModelSelect={handleModelSelect}
                />
              </TabsContent>

              <TabsContent value="configure" className="mt-6">
                {selectedModel ? (
                  <ParameterForm
                    model={selectedModel}
                    values={parameters}
                    onChange={handleParameterChange}
                    onSubmit={handleGenerate}
                    isLoading={isGenerating}
                  />
                ) : (
                  <Card className="bg-gray-50 border-gray-200">
                    <CardContent className="p-8 text-center">
                      <Settings className="w-12 h-12 mx-auto mb-4 text-gray-400" />
                      <h3 className="text-lg font-medium text-gray-800 mb-2">
                        No Model Selected
                      </h3>
                      <p className="text-gray-600 mb-4">
                        Choose a model from the Models tab to configure its parameters.
                      </p>
                      <Button 
                        variant="outline" 
                        onClick={() => setActiveTab('models')}
                        className="bg-white border-gray-300 text-gray-700 hover:bg-gray-50"
                      >
                        Select Model
                      </Button>
                    </CardContent>
                  </Card>
                )}
              </TabsContent>

              <TabsContent value="results" className="mt-6">
                <ResultDisplay 
                  result={currentResult}
                  isLoading={isGenerating}
                />
              </TabsContent>

              <TabsContent value="help" className="mt-6">
                <UsageGuide selectedModel={selectedModel} />
              </TabsContent>
            </Tabs>
          </div>

          {/* Right Column - Quick Info & Actions */}
          <div className="space-y-6">
            {/* Selected Model Info */}
            {selectedModel && (
              <Card className="bg-gray-50 border-gray-200">
                <CardHeader>
                  <CardTitle className="text-lg text-black flex items-center justify-between">
                    Current Model
                    {selectedModel.isPopular && (
                      <Badge className="bg-yellow-100 text-yellow-800 border-yellow-300">
                        Popular
                      </Badge>
                    )}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <h3 className="font-medium text-black">{selectedModel.name}</h3>
                    <p className="text-sm text-gray-600">{selectedModel.provider}</p>
                  </div>
                  <p className="text-sm text-gray-700">{selectedModel.description}</p>
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>Cost: {selectedModel.pricing.creditsPerUse} credits</span>
                    <span>{selectedModel.pricing.estimatedTime}</span>
                  </div>
                  <div className="pt-2">
                    <Button
                      size="sm"
                      onClick={() => setActiveTab('configure')}
                      className="w-full bg-black text-white hover:bg-gray-800"
                      disabled={activeTab === 'configure'}
                    >
                      Configure Parameters
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Quick Actions */}
            <Card className="bg-white border-gray-200">
              <CardHeader>
                <CardTitle className="text-lg text-black flex items-center gap-2">
                  <Users className="w-5 h-5" />
                  Popular Models
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {availableModels.filter(m => m.isPopular).slice(0, 3).map((model) => (
                  <Button
                    key={model.id}
                    variant="ghost"
                    size="sm"
                    onClick={() => handleModelSelect(model)}
                    className="w-full justify-start text-left h-auto p-3 bg-gray-50 hover:bg-gray-100"
                  >
                    <div className="space-y-1">
                      <div className="font-medium text-black">{model.name}</div>
                      <div className="text-xs text-gray-600">{model.category.replace('-', ' ')}</div>
                    </div>
                  </Button>
                ))}
              </CardContent>
            </Card>

            {/* Usage Tips */}
            <Card className="bg-blue-50 border-blue-200">
              <CardHeader>
                <CardTitle className="text-lg text-blue-900 flex items-center gap-2">
                  <HelpCircle className="w-5 h-5" />
                  Pro Tips
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2 text-sm text-blue-800">
                <div className="flex items-start gap-2">
                  <span>💡</span>
                  <span>Be specific in your prompts for better results</span>
                </div>
                <div className="flex items-start gap-2">
                  <span>⚡</span>
                  <span>Popular models are optimized for best performance</span>
                </div>
                <div className="flex items-start gap-2">
                  <span>🎯</span>
                  <span>Experiment with different parameter values</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </section>
  );
};

ToolSection.displayName = 'ToolSection';

export default ToolSection;